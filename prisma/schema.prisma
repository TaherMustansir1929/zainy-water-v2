// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Area {
  Saddar
  Clifton
  Gulshan
  Korangi
  Malir
  NorthNazimabad
  Gulistan
  Liaquatabad
  Nazimabad
}

model Admin {
  id        String   @id @default(cuid())
  name      String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id           String   @id @default(cuid())
  customer_id  String   @unique
  name         String
  address      String
  area         Area
  phone        String
  bottle_price Int
  bottles      Int
  deposit      Int
  balance      Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  deliveries Delivery[]
}

model Moderator {
  id        String   @id @default(cuid())
  name      String   @unique
  password  String
  areas     Area[]
  isWorking Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveries   Delivery[]
  OtherExpense OtherExpense[]
  bottleUsage  BottleUsage[]
}

model Delivery {
  id              String   @id @default(cuid())
  customer_id     String
  moderator_id    String
  delivery_date   DateTime
  payment         Int
  filled_bottles  Int
  empty_bottles   Int
  foc             Int
  damaged_bottles Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  moderator Moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
}

model OtherExpense {
  id           String   @id @default(cuid())
  moderator_id String
  amount       Int
  description  String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  moderator Moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
}

model FOC {
  id          String   @id @default(cuid())
  bottles     Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TotalBottles {
  id                String   @id @default(cuid())
  total_bottles     Int
  available_bottles Int
  used_bottles      Int      @default(0)
  damaged_bottles   Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BottleUsage {
  id               String   @id @default(cuid())
  moderator_id     String
  filled_bottles   Int
  sales            Int      @default(0)
  empty_bottles    Int      @default(0)
  returned_bottles Int      @default(0)
  caps             Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  moderator Moderator @relation(fields: [moderator_id], references: [id], onDelete: Cascade)
}
